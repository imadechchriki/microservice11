name: Build and Push Docker Images

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: docker.io
  REGISTRY_USERNAME: imadch
  REPOSITORY_PREFIX: imadch/microservice11

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service:
          - name: auth-service
            context: ./backend/authentication_system/authentication_system
            dockerfile: Dockerfile
          - name: catalog-service
            context: ./backend/catalog-service
            dockerfile: Dockerfile
          - name: questionnaire-service
            context: ./backend/questionnaire-service
            dockerfile: Dockerfile
          - name: statistics-service
            context: ./backend/statistics-service/Statistics.API
            dockerfile: Dockerfile
          - name: api-gateway
            context: ./backend/api-gateway
            dockerfile: Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: imadch
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          ecr: auto
          logout: true

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REPOSITORY_PREFIX }}-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          dockerfile: ${{ matrix.service.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REPOSITORY_PREFIX }}-${{ matrix.service.name }}:${{ github.sha }}
            ${{ env.REPOSITORY_PREFIX }}-${{ matrix.service.name }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.build.outputs.digest }}"

  # Job séparé pour nettoyer les anciens caches (optionnel)
  cleanup-cache:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Cleanup old cache
        run: |
          echo "Cache cleanup completed"
